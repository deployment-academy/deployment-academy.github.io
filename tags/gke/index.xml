<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>gke on Deployment</title><link>https://deployment.properties/tags/gke/</link><description>Recent content in gke on Deployment</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 18 Sep 2021 13:48:06 -0400</lastBuildDate><atom:link href="https://deployment.properties/tags/gke/index.xml" rel="self" type="application/rss+xml"/><item><title>GKE Dataplane V2 and Network Policies in Practice</title><link>https://deployment.properties/posts/devsecops/gke-dataplane-v2-network-policies/</link><pubDate>Sat, 18 Sep 2021 13:48:06 -0400</pubDate><guid>https://deployment.properties/posts/devsecops/gke-dataplane-v2-network-policies/</guid><description>&lt;p>In this tutorial, we are going to play with the &lt;a href="https://cloud.google.com/kubernetes-engine/docs/concepts/dataplane-v2">Google Kubernetes Engine Dataplane V2&lt;/a> and check how we can use it along with &lt;a href="https://kubernetes.io/docs/concepts/services-networking/network-policies/">Kubernetes Network Policies&lt;/a> to limit traffic to Pods and to obtain real-time visibility on network activity.&lt;/p>
&lt;p>Dataplane V2 is a recent feature in GKE whith GA starting on version 1.20.6-gke.700, as of May 10, 2021 - &lt;a href="https://cloud.google.com/blog/products/containers-kubernetes/bringing-ebpf-and-cilium-to-google-kubernetes-engine">see this feature announcement for more details&lt;/a>. Dataplane V2 uses &lt;a href="https://ebpf.io/">eBPF&lt;/a> and &lt;a href="https://cilium.io/">Cilium&lt;/a> to performantly process network packets in-kernel using Kubernetes-specific metadata without relying on the kube-proxy and iptables for service routing. Dataplane V2 brings some interesting features for cluster operations and security, such as:&lt;/p>
&lt;ul>
&lt;li>Built-in Network Policies enforcement without the need of Calico&lt;/li>
&lt;li>Real-time visibility, enabling cluster networking troubleshooting, auditing and alerting&lt;/li>
&lt;/ul></description></item><item><title>Google Cloud Endpoints in GKE with Container-native Load Balancing</title><link>https://deployment.properties/posts/devsecops/gke-cloud-endpoints/</link><pubDate>Mon, 08 Mar 2021 00:00:00 +0000</pubDate><guid>https://deployment.properties/posts/devsecops/gke-cloud-endpoints/</guid><description>&lt;p>In the source code for this tutorial, we extend the &lt;a href="https://cloud.google.com/endpoints/docs/openapi/get-started-kubernetes-engine">Getting started with Cloud Endpoints for GKE with ESP&lt;/a> documentation guide to provide an example of how to configure HTTPS between the LB and the ESP.&lt;/p></description></item><item><title>Workload Identity in Practice</title><link>https://deployment.properties/posts/devsecops/workload-identity-getting-started/</link><pubDate>Mon, 15 Jun 2020 00:00:00 +0000</pubDate><guid>https://deployment.properties/posts/devsecops/workload-identity-getting-started/</guid><description>&lt;p>In this tutorial, we&amp;rsquo;re going to go through the &lt;a href="https://cloud.google.com/blog/products/containers-kubernetes/introducing-workload-identity-better-authentication-for-your-gke-applications">Workload Identity&lt;/a> feature and see how it helps to improve the way we manage access to Google Services and APIs from applications running in &lt;a href="https://cloud.google.com/kubernetes-engine">Google Kubernetes Engine (GKE)&lt;/a>.&lt;/p>
&lt;p>Workload Identity is the recommended way to access Google Cloud APIs from within GKE due to its improved security properties and manageability. With Workload Identity you can control access to APIs using &lt;a href="https://cloud.google.com/iam/docs/service-accounts">Google service accounts&lt;/a> and &lt;a href="https://cloud.google.com/iam/docs/understanding-roles">IAM roles&lt;/a> without deploying static service account JSON keys to Pods and without relying on the node&amp;rsquo;s service account.&lt;/p></description></item></channel></rss>