<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>workload identity on Deployment</title><link>https://deployment.properties/tags/workload-identity/</link><description>Recent content in workload identity on Deployment</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 15 Jun 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://deployment.properties/tags/workload-identity/index.xml" rel="self" type="application/rss+xml"/><item><title>Workload Identity in Practice</title><link>https://deployment.properties/posts/devsecops/workload-identity-getting-started/</link><pubDate>Mon, 15 Jun 2020 00:00:00 +0000</pubDate><guid>https://deployment.properties/posts/devsecops/workload-identity-getting-started/</guid><description>&lt;p>In this tutorial, we&amp;rsquo;re going to go through the &lt;a href="https://cloud.google.com/blog/products/containers-kubernetes/introducing-workload-identity-better-authentication-for-your-gke-applications">Workload Identity&lt;/a> feature and see how it helps to improve the way we manage access to Google Services and APIs from applications running in &lt;a href="https://cloud.google.com/kubernetes-engine">Google Kubernetes Engine (GKE)&lt;/a>.&lt;/p>
&lt;p>Workload Identity is the recommended way to access Google Cloud APIs from within GKE due to its improved security properties and manageability. With Workload Identity you can control access to APIs using &lt;a href="https://cloud.google.com/iam/docs/service-accounts">Google service accounts&lt;/a> and &lt;a href="https://cloud.google.com/iam/docs/understanding-roles">IAM roles&lt;/a> without deploying static service account JSON keys to Pods and without relying on the node&amp;rsquo;s service account.&lt;/p></description></item></channel></rss>