<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>vault on Deployment</title><link>https://deployment.properties/tags/vault/</link><description>Recent content in vault on Deployment</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 25 Nov 2022 12:14:53 -0500</lastBuildDate><atom:link href="https://deployment.properties/tags/vault/index.xml" rel="self" type="application/rss+xml"/><item><title>CockroachDB with HashiCorp Vault PKI and cert-manager</title><link>https://deployment.properties/posts/devsecops/cockroachdb-vault-pki-certmanager/</link><pubDate>Fri, 25 Nov 2022 12:14:53 -0500</pubDate><guid>https://deployment.properties/posts/devsecops/cockroachdb-vault-pki-certmanager/</guid><description>&lt;p>In this tutorial, we are going to spin up a CockroachDB secure cluster running in Kubernetes with certificates managed by
HashiCorp Vault and issued by cert-manager. Before we get to the final state, we are going to evolve the installation
step by step to understand how each component is contributing to the setup and what we are gaining.&lt;/p>
&lt;p>We&amp;rsquo;ll focus on the execution, assuming you are minimally familiar with these components. Links will be provided for
additional context when necessary.&lt;/p>
&lt;p>This tutorial can be executed from your local machine, no cloud resources are necessary.&lt;/p></description></item><item><title>HashiCorp Vault AWS Auth with Amazon EKS and IAM Roles for Service Accounts</title><link>https://deployment.properties/posts/devsecops/vault-eks-irsa/</link><pubDate>Sun, 23 May 2021 00:00:00 +0000</pubDate><guid>https://deployment.properties/posts/devsecops/vault-eks-irsa/</guid><description>&lt;p>In this tutorial, we are going to configure and explore the &lt;a href="https://www.vaultproject.io/docs/auth/aws">HashiCorp Vault AWS Auth method&lt;/a> with &lt;a href="https://aws.amazon.com/eks">Amazon EKS&lt;/a>. We will start performing the Vault authentication using the EC2 instances (Kubernetes nodes) identity and later we will use a Kubernetes service account to impersonate an AWS IAM Role and have more fine-grained control at the Pod level.&lt;/p></description></item></channel></rss>