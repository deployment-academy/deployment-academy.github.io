<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>aws on Deployment</title><link>https://deployment.properties/tags/aws/</link><description>Recent content in aws on Deployment</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 16 Oct 2021 23:37:41 -0400</lastBuildDate><atom:link href="https://deployment.properties/tags/aws/index.xml" rel="self" type="application/rss+xml"/><item><title>IaC Security and Compliance with Regula</title><link>https://deployment.properties/posts/devsecops/iac-cloud-k8s-security-regula/</link><pubDate>Sat, 16 Oct 2021 23:37:41 -0400</pubDate><guid>https://deployment.properties/posts/devsecops/iac-cloud-k8s-security-regula/</guid><description>&lt;p>Infrastructure as Code (IaC) is an essential piece of the modern software development landscape. IaC tools allow teams to define their infrastructure in a reproducible-automated fashion, increasing speed and consistency while preventing errors, misconfiguration, and configuration drifts.&lt;/p>
&lt;p>IaC also plays an important role in security. It gives visibility over the whole infrastructure, including its security aspects and components, even before they have been deployed. Development and/or security and operations teams can define sensible security defaults and a security baseline enforcing best practices that are automated and applied via the CICD pipeline, where changes can be reviewed and approved following the separation of duties principle.&lt;/p></description></item><item><title>Using Network Policies in EKS with Cilium</title><link>https://deployment.properties/posts/devsecops/eks-cilium-network-policies/</link><pubDate>Sun, 26 Sep 2021 14:15:28 -0400</pubDate><guid>https://deployment.properties/posts/devsecops/eks-cilium-network-policies/</guid><description>&lt;p>In this tutorial, we will deploy &lt;a href="https://cilium.io/">Cilium&lt;/a> to an &lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/getting-started.html">Amazon EKS&lt;/a> cluster and limit traffic to Pods using Kubernetes &lt;a href="https://kubernetes.io/docs/concepts/services-networking/network-policies/">Network Policies&lt;/a>.&lt;/p>
&lt;p>Network Policies are not available in Kubernetes out-of-the-box. To leverage Network Policies, you must use a &lt;a href="https://kubernetes.io/docs/concepts/extend-kubernetes/compute-storage-net/network-plugins/">network plugin&lt;/a> that implements such a feature - here is where Cilium comes into play.&lt;/p>
&lt;p>It&amp;rsquo;s worth noting that while this is the scope of this tutorial, Cilium is not limited to Network Policies and not even limited to Kubernetes. Check the &lt;a href="https://docs.cilium.io/en/stable/intro/">Introduction to Cilium&lt;/a> to learn more about it and the &lt;a href="https://docs.cilium.io/en/stable/concepts/kubernetes/intro/">Kubernetes Integration doc&lt;/a> about how Cilium works with Kubernetes.&lt;/p></description></item><item><title>HashiCorp Vault AWS Auth with Amazon EKS and IAM Roles for Service Accounts</title><link>https://deployment.properties/posts/devsecops/vault-eks-irsa/</link><pubDate>Sun, 23 May 2021 00:00:00 +0000</pubDate><guid>https://deployment.properties/posts/devsecops/vault-eks-irsa/</guid><description>&lt;p>In this tutorial, we are going to configure and explore the &lt;a href="https://www.vaultproject.io/docs/auth/aws">HashiCorp Vault AWS Auth method&lt;/a> with &lt;a href="https://aws.amazon.com/eks">Amazon EKS&lt;/a>. We will start performing the Vault authentication using the EC2 instances (Kubernetes nodes) identity and later we will use a Kubernetes service account to impersonate an AWS IAM Role and have more fine-grained control at the Pod level.&lt;/p></description></item></channel></rss>